version: 2.1

# Define the jobs
jobs:
  # The 'build' job will compile the application using Maven.
  build:
    docker:
      # Specify the Docker image used for this job, which includes OpenJDK 21.
      # This will provide a Java environment for building the application.
      - image: cimg/openjdk:21.0.2
    steps:
      # Checkout the latest code from the repository.
      - checkout

      # Set execute permission for the Maven wrapper script (mvnw) to ensure it's executable.
      - run:
          name: Set Execute Permission for Maven Wrapper
          command: chmod +x ./mvnw

      # Resolve project dependencies using Maven.
      # This step will download any required dependencies specified in pom.xml file.
      - run:
          name: Install dependencies
          command: ./mvnw dependency:resolve

      # Build the project and package it into a JAR/WAR file using Maven.
      # The 'clean' command removes any previously compiled artifacts,
      # and 'install' compiles, tests, and installs the package locally.
      - run:
          name: Build and Install
          command: ./mvnw clean install
  docker-build:
    docker:
      # Use the Docker image that includes Docker CLI for building Docker images.
      - image: cimg/openjdk:21.0.2
    steps:
      # Checkout the latest code from the repository.
      - checkout
      - setup_remote_docker:
          version: default

      - run:
          name: Log in to Docker Hub
          command: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      # Build the Docker image.
      - run:
          name: Build Docker Image
          command: |
            docker build \
              --build-arg SERVICE_NAME=Code-generation \
              --build-arg EVERESTEK_MAINTAINER=faiz.qureshi@everestek.com \
              --build-arg JAR_FILE_PATH=target/sftp-connector-1.0.war \
              --build-arg JAR_FILE_NAME=sftp-connector-1.0.war \
              -t sftp-connector:latest .

      # Push the Docker image to a registry (optional).
      - run:
          name: Push Docker Image
          command: docker push my-docker-repo/my-service:latest
            # Persist the target directory to share it with other jobs.
      - persist_to_workspace:
          root: .
          paths:
           - target

# Define the workflow
workflows:
  version: 2  # Specify the version of workflows (version 2 is the latest).
  build-test-workflow:
    # List of jobs to run in the workflow.
    # This workflow runs the 'build' and 'docker-build' jobs sequentially.
    jobs:
      - build
      - docker-build:
          requires:
            - build  # Ensure the 'build' job completes successfully before running 'docker-build'.
