version: 2.1

# Define the jobs
jobs:
  build:
    docker:
      - image: cimg/openjdk:21.0.2
    steps:
      - checkout
      - run:
          name: Set Execute Permission for Maven Wrapper
          command: chmod +x ./mvnw
      - run:
          name: Install dependencies
          command: ./mvnw dependency:resolve
      - run:
          name: Build and Install
          command: ./mvnw clean install

  build-image:
    docker:
      - image: cimg/openjdk:21.0.2
    parameters:
      dockerfile:
        default: deployments/Dockerfile
        description: Name of Dockerfile to use. Defaults to `deployments/Dockerfile`.
        type: string
      path:
        default: .
        description: Path to the directory containing your Dockerfile and build context. Defaults to `.`.
        type: string
      service-name:
        default: SERVICE_NAME
        description: The name of the service.
        type: string
      maintainer:
        default: EVERESTEK_MAINTAINER
        description: The name and email of the Dockerfile maintainer.
        type: string
      jar-file-name:
        default: JAR_FILE_NAME
        description: The name of the JAR file generated.
        type: string
      jar-file-path:
        default: JAR_FILE_PATH
        description: The path where the generated JAR file is located.
        type: string
      micro-service-name:
        default: MICRO_SERVICE_NAME
        description: The name of the microservice.
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set Environment Variable for Timestamp
          command: echo "export TIMESTAMP=$(date +\"%Y%m%d%H%M%S\")" >> $BASH_ENV
      - run:
          name: Build Docker Image
          command: |
            docker build \
              --build-arg SERVICE_NAME=<< parameters.service-name >> \
              --build-arg EVERESTEK_MAINTAINER=<< parameters.maintainer >> \
              --build-arg JAR_FILE_PATH=<< parameters.jar-file-path >> \
              --build-arg JAR_FILE_NAME=<< parameters.jar-file-name >> \
              --build-arg MICRO_SERVICE_NAME=<< parameters.micro-service-name >> \
              -f << parameters.dockerfile >> \
              -t << parameters.micro-service-name >>:1.0.0-${TIMESTAMP}_SNAPSHOT \
              << parameters.path >>

  push-image:
    docker:
      - image: cimg/openjdk:21.0.2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Push Docker Image
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push << parameters.micro-service-name >>:1.0.0-${TIMESTAMP}_SNAPSHOT

# Define the workflow
workflows:
  version: 2
  build-test-workflow:
    jobs:
      - build
      - build-image:
          name: build-microservice
          dockerfile: deployments/Dockerfile
          path: .
          service-name: my-service
          maintainer: my-maintainer@example.com
          jar-file-name: my-application.jar
          jar-file-path: ./target
          micro-service-name: my-microservice
      - push-image:
          requires:
            - build-image  # Ensure `push-image` runs after `build-image`
          dockerfile: deployments/Dockerfile
          path: .
          service-name: my-service
          maintainer: my-maintainer@example.com
          jar-file-name: my-application.jar
          jar-file-path: ./target
          micro-service-name: my-microservice
